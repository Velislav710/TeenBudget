import { TransactionAnalysisData } from './home-types';

export const fetchOpenAIResponse = async (
  transactionData: TransactionAnalysisData,
) => {
  try {
    console.log('üöÄ –ò–∑–ø—Ä–∞—â–∞–Ω–µ –Ω–∞ –¥–∞–Ω–Ω–∏ –∫—ä–º AI:', transactionData);
    console.log('API Key loaded:', !!import.meta.env.VITE_OPENAI_API_KEY);

    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        Authorization: `Bearer ${import.meta.env.VITE_OPENAI_API_KEY}`,
      },
      body: JSON.stringify({
        model: 'gpt-4o-2024-08-06',

        messages: [
          {
            role: 'system',
            content: `–¢–∏ —Å–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤ —Å—ä–≤–µ—Ç–Ω–∏–∫ –∑–∞ —Ç–∏–π–Ω–µ–π–¥–∂—ä—Ä–∏. –ê–Ω–∞–ª–∏–∑–∏—Ä–∞–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏—Ç–µ –∏ —Å—ä–∑–¥–∞–π –ø–æ–ª–µ–∑–Ω–∏ —Å—ä–≤–µ—Ç–∏ –∑–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –±—é–¥–∂–µ—Ç–∞. –í—Ä—ä—â–∞–π –æ—Ç–≥–æ–≤–æ—Ä–∞ –°–ê–ú–û –≤ JSON —Ñ–æ—Ä–º–∞—Ç: {
              "analysis": {
                "summary": "–∫—Ä–∞—Ç–∫–æ –æ–±–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ—Ç–æ —Å—ä—Å—Ç–æ—è–Ω–∏–µ",
                "recommendations": ["—Å–ø–∏—Å—ä–∫ —Å 3 –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏ –ø—Ä–µ–ø–æ—Ä—ä–∫–∏"],
                "savingsPotential": "–ø—Ä–æ—Ü–µ–Ω—Ç –≤—ä–∑–º–æ–∂–Ω–∏ —Å–ø–µ—Å—Ç—è–≤–∞–Ω–∏—è"
              }
            }`,
          },
          {
            role: 'user',
            content: `–ê–Ω–∞–ª–∏–∑–∏—Ä–∞–π —Ç–µ–∑–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–∏ –¥–∞–Ω–Ω–∏ –∏ –¥–∞–π –ø—Ä–µ–ø–æ—Ä—ä–∫–∏:
            ${JSON.stringify(transactionData, null, 2)}`,
          },
        ],
      }),
    });

    if (!response.ok) {
      throw new Error(`OpenAI API Error: ${response.status}`);
    }

    const data = await response.json();
    console.log('‚úÖ AI –æ—Ç–≥–æ–≤–æ—Ä –ø–æ–ª—É—á–µ–Ω:', data);

    const rawContent = data?.choices[0]?.message?.content;

    if (!rawContent) {
      throw new Error(
        'Failed to extract recommendations from OpenAI response.',
      );
    }

    const cleanedContent = rawContent
      .replace(/^```json([\s\S]*?)```$/, '$1')
      .replace(/^```([\s\S]*?)```$/, '$1')
      .trim();

    return cleanedContent ? JSON.parse(cleanedContent) : null;
  } catch (error) {
    console.error('‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ AI –∑–∞—è–≤–∫–∞—Ç–∞:', error);
    return null;
  }
};
